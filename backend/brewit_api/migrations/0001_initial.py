# Generated by Django 5.0 on 2024-12-10 18:39

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BeerType',
            fields=[
                ('beer_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('uses_bacteria', models.BooleanField()),
            ],
            options={
                'db_table': 'beer_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Packagingtype',
            fields=[
                ('packaging_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'db_table': 'packagingtype',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'db_table': 'role',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('sector_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32)),
                ('allows_bacteria', models.BooleanField()),
            ],
            options={
                'db_table': 'sector',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Brewery',
            fields=[
                ('brewery_id', models.AutoField(primary_key=True, serialize=False)),
                ('selector', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=128)),
                ('nip', models.CharField(blank=True, max_length=10, null=True)),
                ('water_ph', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'brewery',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('equipment_id', models.AutoField(primary_key=True, serialize=False)),
                ('selector', models.CharField(max_length=10)),
                ('capacity', models.IntegerField()),
                ('name', models.CharField(max_length=32)),
                ('daily_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.CharField(blank=True, max_length=512, null=True)),
                ('min_temperature', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('max_temperature', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('brewery', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='brewit_api.brewery')),
                ('sector', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='brewit_api.sector')),
            ],
            options={
                'db_table': 'equipment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EquipmentReservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selector', models.CharField(max_length=10)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('reservation_id', models.IntegerField(blank=True, null=True)),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='brewit_api.equipment')),
            ],
            options={
                'db_table': 'equipment_reservation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('recipe_id', models.AutoField(primary_key=True, serialize=False)),
                ('recipe_body', models.CharField(blank=True, max_length=2048, null=True)),
                ('beer_type_beer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='brewit_api.beertype')),
                ('contract_brewery_brewery', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='brewit_api.brewery')),
            ],
            options={
                'db_table': 'recipe',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('reservation_id', models.AutoField(primary_key=True, serialize=False)),
                ('price', models.IntegerField()),
                ('brew_size', models.IntegerField()),
                ('authorised_workers', models.CharField(blank=True, max_length=512, null=True)),
                ('contract_brewery', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='reservation_contract_brewery_set', to='brewit_api.brewery')),
                ('production_brewery', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='brewit_api.brewery')),
            ],
            options={
                'db_table': 'reservation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ExecutionLog',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_successful', models.BooleanField(blank=True, null=True)),
                ('log', models.CharField(blank=True, max_length=2048, null=True)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='brewit_api.recipe')),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='brewit_api.reservation')),
            ],
            options={
                'db_table': 'execution_log',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Vatpackaging',
            fields=[
                ('vat_packaging_id', models.AutoField(primary_key=True, serialize=False)),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='brewit_api.equipment')),
                ('packaging_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='brewit_api.packagingtype')),
            ],
            options={
                'db_table': 'vatpackaging',
                'managed': True,
            },
        ),
    ]
